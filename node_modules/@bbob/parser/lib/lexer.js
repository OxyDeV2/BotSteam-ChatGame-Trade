'use strict';

exports.__esModule = true;
exports.createLexer = exports.createTokenOfType = undefined;

var _char = require('@bbob/plugin-helper/lib/char');

var _Token = require('./Token');

var _utils = require('./utils');

// for cases <!-- -->
var EM = '!';

/**
 * Creates a Token entity class
 * @param {String} type
 * @param {String} value
 * @param {Number} r line number
 * @param {Number} cl char number in line
 */
/* eslint-disable no-plusplus,no-param-reassign */
var createToken = function createToken(type, value) {
  var r = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  var cl = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
  return new _Token.Token(type, value, r, cl);
};

/**
 * @typedef {Object} Lexer
 * @property {Function} tokenize
 * @property {Function} isTokenNested
 */

/**
 * @param {String} buffer
 * @param {Object} options
 * @param {Function} options.onToken
 * @param {String} options.openTag
 * @param {String} options.closeTag
 * @return {Lexer}
 */
function createLexer(buffer) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var row = 0;
  var col = 0;

  var tokenIndex = -1;
  var tokens = new Array(Math.floor(buffer.length));
  var openTag = options.openTag || _char.OPEN_BRAKET;
  var closeTag = options.closeTag || _char.CLOSE_BRAKET;

  var RESERVED_CHARS = [closeTag, openTag, _char.QUOTEMARK, _char.BACKSLASH, _char.SPACE, _char.TAB, _char.EQ, _char.N, EM];
  var NOT_CHAR_TOKENS = [openTag, _char.SPACE, _char.TAB, _char.N];
  var WHITESPACES = [_char.SPACE, _char.TAB];
  var SPECIAL_CHARS = [_char.EQ, _char.SPACE, _char.TAB];

  var isCharReserved = function isCharReserved(char) {
    return RESERVED_CHARS.indexOf(char) >= 0;
  };
  var isWhiteSpace = function isWhiteSpace(char) {
    return WHITESPACES.indexOf(char) >= 0;
  };
  var isCharToken = function isCharToken(char) {
    return NOT_CHAR_TOKENS.indexOf(char) === -1;
  };
  var isSpecialChar = function isSpecialChar(char) {
    return SPECIAL_CHARS.indexOf(char) >= 0;
  };

  /**
   * Emits newly created token to subscriber
   * @param token
   */
  var emitToken = function emitToken(token) {
    if (options.onToken) {
      options.onToken(token);
    }

    tokenIndex += 1;
    tokens[tokenIndex] = token;
  };

  /**
   * Parses params inside [myTag---params goes here---]content[/myTag]
   * @param str
   * @returns {{tag: *, attrs: Array}}
   */
  var parseAttrs = function parseAttrs(str) {
    var tagName = null;
    var skipSpecialChars = false;

    var attrTokens = [];
    var attrCharGrabber = (0, _utils.createCharGrabber)(str);

    var validAttr = function validAttr(char) {
      var isEQ = char === _char.EQ;
      var isWS = isWhiteSpace(char);
      var prevChar = attrCharGrabber.getPrev();
      var nextChar = attrCharGrabber.getNext();
      var isPrevSLASH = prevChar === _char.BACKSLASH;
      var isTagNameEmpty = tagName === null;

      if (isTagNameEmpty) {
        return (isEQ || isWS || attrCharGrabber.isLast()) === false;
      }

      if (skipSpecialChars && isSpecialChar(char)) {
        return true;
      }

      if (char === _char.QUOTEMARK && !isPrevSLASH) {
        skipSpecialChars = !skipSpecialChars;

        if (!skipSpecialChars && !(nextChar === _char.EQ || isWhiteSpace(nextChar))) {
          return false;
        }
      }

      return (isEQ || isWS) === false;
    };

    var nextAttr = function nextAttr() {
      var attrStr = attrCharGrabber.grabWhile(validAttr);
      var currChar = attrCharGrabber.getCurr();

      // first string before space is a tag name [tagName params...]
      if (tagName === null) {
        tagName = attrStr;
      } else if (isWhiteSpace(currChar) || currChar === _char.QUOTEMARK || !attrCharGrabber.hasNext()) {
        var escaped = (0, _utils.unquote)((0, _utils.trimChar)(attrStr, _char.QUOTEMARK));
        attrTokens.push(createToken(_Token.TYPE_ATTR_VALUE, escaped, row, col));
      } else {
        attrTokens.push(createToken(_Token.TYPE_ATTR_NAME, attrStr, row, col));
      }

      attrCharGrabber.skip();
    };

    while (attrCharGrabber.hasNext()) {
      nextAttr();
    }

    return { tag: tagName, attrs: attrTokens };
  };

  var bufferGrabber = (0, _utils.createCharGrabber)(buffer, {
    onSkip: function onSkip() {
      col++;
    }
  });

  var next = function next() {
    var currChar = bufferGrabber.getCurr();

    if (currChar === _char.N) {
      bufferGrabber.skip();
      col = 0;
      row++;

      emitToken(createToken(_Token.TYPE_NEW_LINE, currChar, row, col));
    } else if (isWhiteSpace(currChar)) {
      var str = bufferGrabber.grabWhile(isWhiteSpace);
      emitToken(createToken(_Token.TYPE_SPACE, str, row, col));
    } else if (currChar === openTag) {
      var nextChar = bufferGrabber.getNext();
      bufferGrabber.skip(); // skip openTag

      // detect case where we have '[My word [tag][/tag]' or we have '[My last line word'
      var substr = bufferGrabber.substrUntilChar(closeTag);
      var hasInvalidChars = substr.length === 0 || substr.indexOf(openTag) >= 0;

      if (isCharReserved(nextChar) || hasInvalidChars || bufferGrabber.isLast()) {
        emitToken(createToken(_Token.TYPE_WORD, currChar, row, col));
      } else {
        var _str = bufferGrabber.grabWhile(function (val) {
          return val !== closeTag;
        });

        bufferGrabber.skip(); // skip closeTag
        // [myTag   ]
        var isNoAttrsInTag = _str.indexOf(_char.EQ) === -1;
        // [/myTag]
        var isClosingTag = _str[0] === _char.SLASH;

        if (isNoAttrsInTag || isClosingTag) {
          emitToken(createToken(_Token.TYPE_TAG, _str, row, col));
        } else {
          var parsed = parseAttrs(_str);

          emitToken(createToken(_Token.TYPE_TAG, parsed.tag, row, col));

          parsed.attrs.map(emitToken);
        }
      }
    } else if (currChar === closeTag) {
      bufferGrabber.skip(); // skip closeTag

      emitToken(createToken(_Token.TYPE_WORD, currChar, row, col));
    } else if (isCharToken(currChar)) {
      var _str2 = bufferGrabber.grabWhile(isCharToken);

      emitToken(createToken(_Token.TYPE_WORD, _str2, row, col));
    }
  };

  var tokenize = function tokenize() {
    while (bufferGrabber.hasNext()) {
      next();
    }

    tokens.length = tokenIndex + 1;

    return tokens;
  };

  var isTokenNested = function isTokenNested(token) {
    var value = openTag + _char.SLASH + token.getValue();
    // potential bottleneck
    return buffer.indexOf(value) > -1;
  };

  return {
    tokenize: tokenize,
    isTokenNested: isTokenNested
  };
}

var createTokenOfType = exports.createTokenOfType = createToken;
exports.createLexer = createLexer;